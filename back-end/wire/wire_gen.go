// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wireinject

import (
	"github.com/devanadindraa/NTTH-Store/back-end/database"
	"github.com/devanadindraa/NTTH-Store/back-end/domains/kamus"
	"github.com/devanadindraa/NTTH-Store/back-end/domains/user"
	"github.com/devanadindraa/NTTH-Store/back-end/middlewares"
	"github.com/devanadindraa/NTTH-Store/back-end/routes"
	"github.com/devanadindraa/NTTH-Store/back-end/utils/config"
	"github.com/devanadindraa/NTTH-Store/back-end/utils/dbselector"
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
)

import (
	_ "github.com/google/subcommands"
)

// Injectors from wire.go:

func initializeDependency(config2 *config.Config) (*routes.Dependency, error) {
	adminDB, err := database.NewDBAdmin(config2)
	if err != nil {
		return nil, err
	}
	customerDB, err := database.NewDBCustomer(config2)
	if err != nil {
		return nil, err
	}
	dbService := dbselector.NewDBService(adminDB, customerDB)
	service := user.NewService(config2, dbService, customerDB, adminDB)
	middlewaresMiddlewares := middlewares.NewMiddlewares(config2, service)
	validate := validator.New()
	handler := user.NewHandler(service, validate)
	kamusService := kamus.NewService(config2, dbService, customerDB, adminDB)
	kamusHandler := kamus.NewHandler(kamusService, validate)
	dependency := routes.NewDependency(config2, middlewaresMiddlewares, adminDB, customerDB, handler, kamusHandler)
	return dependency, nil
}

// wire.go:

var dbSet = wire.NewSet(database.NewDBCustomer, database.NewDBAdmin)

var dbSelectorSet = wire.NewSet(dbselector.NewDBService)

var userSet = wire.NewSet(user.NewService, user.NewHandler)

var kamusSet = wire.NewSet(kamus.NewService, kamus.NewHandler)
